Full Credit
===========

Number of cores available to my test environment (in bash use ``nproc`` command):
Primes range for my machine (between 20 and 30 second runtime without threads):  1 to 40000000

Without threads:

real 29.310	
user 28.90	
sys  0.23	


With 2 threads:

real	17.94s
user	28.58s
sys	0.16s


With 3 threads:

real	12.498 s
user	28.52 s
sys	0.10 s


With 4 threads:

real	9.648s
user	29.03s
sys	0.13s


With 5 threads:

real	8.789s
user	32.85s
sys	0.18s


With 6 threads:

real	7.770
user	34.91s
sys	0.13s


With 7 threads:

real	7.234s
user	38.07s
sys	0.14s


With 8 threads:

real	6.876s
user	41.68s
sys	0.15s


With 16 threads:

real	6.282s
user	45.48s
sys	0.20s


With 32 threads:

real	6.06s
user	46.10s
sys	0.20s


With 64 threads:

real	6.188s
user	46.23s
sys	0.20s


QUESTION: After threading is added to threads.cpp, is the order of prime numbers found in primes_threads.txt the same or different than in primes.txt?  Why?
No , because the threads are writing their array list in order in the program.




QUESTION: Does adding more threads continue to speed up the program? Do more threads ever slow down the program slightly?  Why or why not?
Yes , adding more thread speeds up the "wall" time . The time taken to execute the program slowed down from 30 seconds to 6 seconds .



QUESTION: Does adding more threads increase the "system load", or is it constant regardless of the number of threads?  Why?
Yes adding more threads increased the user time as also as the sys time because the system has to keep track of many cores.



